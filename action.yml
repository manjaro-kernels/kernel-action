name: 'Manjaro Kernel Action'
description: 'Builds Manjaro Kernels'

inputs:
  gitlab-pw:
    description: 'gitlab password'
    required: true
  bump-kernel:
    description: 'get kernel repo version and buld higher dot release'
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - id: install_build-dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install \
        build-essential \
        cmake \
        fakeroot \
        git \
        libarchive-dev \
        libarchive-tools \
        libcurl4-openssl-dev \
        libgpgme-dev \
        libssl-dev \
        zip \
        python3-pip
        sudo pip3 install meson
        sudo pip3 install ninja
    - id: install_pacman
      shell: bash
      env:
        PACMAN_VERSION: 6.0.1
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/pacman.git
        pushd pacman
        sudo wget https://sources.archlinux.org/other/pacman/pacman-${PACMAN_VERSION}.tar.xz
        sudo tar -xvf pacman-${PACMAN_VERSION}.tar.xz
        pushd pacman-${PACMAN_VERSION}
        sudo patch -p1 -i ../pacman-sync-first-option.patch
        sudo meson --prefix=/usr \
                    --buildtype=plain \
                    -Ddoc=disabled \
                    -Ddoxygen=enabled \
                    -Dscriptlet-shell=/usr/bin/bash \
                    -Dldconfig=/usr/bin/ldconfig \
                    build
        sudo meson compile -C build
        sudo meson install -C build
        popd
        sudo install -m644 pacman.conf /etc/pacman.conf
        sudo install -m644 makepkg.conf /etc/
        sudo mkdir -p /etc/pacman.d
        echo 'Server = https://repo.manjaro.org/repo/unstable/$repo/$arch' | sudo tee /etc/pacman.d/mirrorlist
        # install updpkgsums
        sudo wget https://gitlab.archlinux.org/pacman/pacman-contrib/-/raw/master/src/updpkgsums.sh.in
        sudo wget https://gitlab.archlinux.org/pacman/pacman-contrib/-/raw/master/configure.ac
        contrib_ver=$(grep AC_INIT configure.ac | cut -d[ -f3 | cut -d] -f1)
        sudo sed -i -e "s/@PACKAGE_VERSION@/${contrib_ver}/; s/@libmakepkgdir@/\/usr\/share\/makepkg/" updpkgsums.sh.in
        sudo install -m755 updpkgsums.sh.in /usr/bin/updpkgsums
        popd
    - id: install_keyrings
      shell: bash
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/manjaro-keyring.git
        pushd manjaro-keyring
        sudo install -dm755 /usr/share/pacman/keyrings/
        sudo install -m0644 manjaro.gpg /usr/share/pacman/keyrings/
        sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
        sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
        popd
    
        sudo git clone --depth 1 https://gitlab.archlinux.org/archlinux/archlinux-keyring.git
        pushd archlinux-keyring
        sudo install -m0644 archlinux.gpg /usr/share/pacman/keyrings/
        sudo install -m0644 archlinux-trusted /usr/share/pacman/keyrings/
        sudo install -m0644 archlinux-revoked /usr/share/pacman/keyrings/
        popd
        sudo pacman-key --init
        sudo pacman-key --populate archlinux manjaro
    - id: install_manjaro-chrootbuild
      shell: bash
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/tools/development-tools/manjaro-chrootbuild
        pushd manjaro-chrootbuild
        sudo ./install.sh
        echo 'PACKAGER="Manjaro Build Server <build@manjaro.org>"' | sudo tee -a /etc/makepkg.conf > /dev/null
        popd
    - id: clone_repo
      shell: bash
      run: |
        KERNEL=$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2)
        sudo git clone https://mjr-build-server:${{ inputs.gitlab-pw }}@gitlab.manjaro.org/packages/core/${KERNEL}.git
        sudo git config --global user.name "Manjaro Build Server"
        sudo git config --global user.email "build@manjaro.org"
        echo "KERNEL=${KERNEL}" >>$GITHUB_ENV
        if [[ "${{ inputs.bump-kernel }}" == "true" ]]; then
          sudo chown -R ${UID}:${UID} ${KERNEL}
          cd ${KERNEL}
          repover=$(sudo pacman -Syi ${KERNEL} | grep Version | rev | cut -d' ' -f1 | rev | cut -d- -f1)
          ver_maj=$(printf "%s.%s" "$(echo ${repover} | cut -d. -f1)" "$(echo ${repover} | cut -d. -f2)")
          ver_min=$(echo ${repover} | cut -d. -f3)
          ver_new=${ver_maj}.$((${ver_min}+1))
          sudo sed -i -e "/^pkgver=/c\pkgver=${ver_new}" PKGBUILD
          sudo sed -i -e "/^pkgrel=/c\pkgrel=1" PKGBUILD
          echo "update PKGBUILD"
          updpkgsums
          sudo git add PKGBUILD
          sudo git commit -m"${ver_new}"
          sudo git push
          cd ..
        fi
    - name: build_kernel
      shell: bash
      run: |
        sudo chrootbuild -p ${{ env.KERNEL }}
    - id: publish_kernel
      shell: bash -O extglob {0}
      run: |
        _ver=$(grep ^pkgver= ${{ env.KERNEL }}/PKGBUILD | cut -d'=' -f2)
        _rel=$(grep ^pkgrel= ${{ env.KERNEL }}/PKGBUILD | cut -d'=' -f2)
        _tag=${_ver}-${_rel}
        sudo zip linux-${_tag}.zip ./*.zst
        echo ${{ github.token }} | gh auth login --with-token
        gh release create ${_tag} --title ${_tag} --repo ${{ github.repository }} --notes "automated release" || echo "release already exists"
        GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${_tag}
        gh release upload ${_tag} --repo ${GITHUB_REPOSITORY} --clobber ./linux-${_tag}.zip
        echo "TAG=${_tag}" >>$GITHUB_ENV
        echo "GITHUB_LINK=${GITHUB_LINK}" >>$GITHUB_ENV
    - id: get_modules
      shell: bash
      run: |
        sudo cp ${{ env.KERNEL }}/modules.list .
        sudo sed -i -e '/^#/d' modules.list
        sudo mkdir modules
        pushd modules
        for m in $(cat ../modules.list); do
          sudo git clone "https://mjr-build-server:${{ inputs.gitlab-pw }}@gitlab.manjaro.org/packages/extra/${{ env.KERNEL }}-extramodules/$m.git"
          _m=$m
          [[ $m == "spl_zfs" ]] && _m=zfs
          [[ $m == "virtualbox-modules" ]] && _m=virtualbox-host-modules
          repover=$(sudo pacman -Syi ${{ env.KERNEL }}-$_m | grep Version | rev | cut -d' ' -f1 | rev)
          _rel=$(echo $repover | cut -d- -f2)
          cd $m
          if [[ $_rel == 0.* ]]; then
            if [[ ! ${{ env.TAG }} == *rc* ]]; then
              sudo sed -i -e "/^pkgrel=/c\pkgrel=1" PKGBUILD
            else
              _rel=${_rel#*.}
              sudo sed -i -e "/^pkgrel=/c\pkgrel=0.$((${_rel}+1))" PKGBUILD
            fi
          else
            sudo sed -i -e "/^pkgrel=/c\pkgrel=$((${_rel}+1))" PKGBUILD
          fi
          _ver=$(echo $repover | cut -d- -f1)
          _gitver=$(grep ^pkgver= PKGBUILD | cut -d= -f2)
          [[ $(vercmp $_gitver $_ver) == 1 ]] && sudo sed -i -e "/^pkgrel=/c\pkgrel=1" PKGBUILD
          sudo git add PKGBUILD
          sudo git commit -m"${_gitver}-$(grep "^pkgrel=" PKGBUILD | cut -d= -f2)"
          sudo git push
          cd ..
        done
        popd
    - id: build_modules
      shell: bash
      run: |
        sudo chrootbuild -K modules -i "${{ env.KERNEL }}-${{ env.TAG }}*.zst" -i "${{ env.KERNEL }}-headers*.zst"
    - id: publish_modules
      shell: bash -O extglob {0}
      run: |
        sudo rm "./${{ env.KERNEL }}-${{ env.TAG }}-x86_64.pkg.tar.zst" "./${{ env.KERNEL }}-headers-${{ env.TAG }}-x86_64.pkg.tar.zst"
        sudo zip "linux-${{ env.TAG }}-extramodules.zip" ./*.zst
        sudo zip "linux-${{ env.TAG }}-logs.zip" /home/runner/.chrootbuild-logs/*
        echo ${{ github.token }} | gh auth login --with-token
        GITHUB_LINK=${{ env.GITHUB_LINK }}
        gh release upload ${{ env.TAG }} --repo ${GITHUB_REPOSITORY} --clobber ./linux-${{ env.TAG }}-extramodules.zip ./linux-${{ env.TAG }}-logs.zip
