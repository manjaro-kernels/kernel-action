name: 'Manjaro Kernel Action'
description: 'Builds Manjaro Kernels'

runs:
  using: "composite"
  steps:
    - id: install_build-dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install \
        gdisk \
        zip \
        systemd-container \
        bmap-tools \
        asciidoc \
        libarchive-tools \
        git \
        build-essential \
        cmake \
        libarchive-dev \
        pkg-config \
        libcurl4-openssl-dev \
        libgpgme-dev \
        libssl-dev \
        fakeroot \
        dh-autoreconf \
        haveged \
        os-prober \
        kwalify \
        dosfstools \
        libisoburn1 \
        squashfs-tools \
        docbook2x \
        mktorrent \
        doxygen \
        python3-pip
        sudo pip3 install meson
        sudo pip3 install ninja
    - id: install_pacman
      shell: bash
      env:
        PACMAN_VERSION: 6.0.0
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/pacman.git
        pushd pacman
        sudo wget https://sources.archlinux.org/other/pacman/pacman-${PACMAN_VERSION}.tar.xz
        sudo tar -xvf pacman-${PACMAN_VERSION}.tar.xz
        pushd pacman-${PACMAN_VERSION}
        sudo patch -p1 -i ../pacman-sync-first-option.patch
        sudo meson --prefix=/usr \
                    --buildtype=plain \
                    -Ddoc=disabled \
                    -Ddoxygen=enabled \
                    -Dscriptlet-shell=/usr/bin/bash \
                    -Dldconfig=/usr/bin/ldconfig \
                    build
        sudo meson compile -C build
        sudo meson install -C build
        popd
        sudo install -m644 pacman.conf /etc/pacman.conf
        sudo install -m644 makepkg.conf /etc/
        sudo mkdir -p /etc/pacman.d
        sudo touch /etc/pacman.d/mirrorlist
        popd
    - id: install_keyrings
      shell: bash
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/manjaro-keyring.git
        pushd manjaro-keyring
        sudo install -dm755 /usr/share/pacman/keyrings/
        sudo install -m0644 manjaro.gpg /usr/share/pacman/keyrings/
        sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
        sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
        popd
    
        sudo git clone --depth 1 https://gitlab.archlinux.org/archlinux/archlinux-keyring.git
        pushd archlinux-keyring
        sudo install -m0644 archlinux.gpg /usr/share/pacman/keyrings/
        sudo install -m0644 archlinux-trusted /usr/share/pacman/keyrings/
        sudo install -m0644 archlinux-revoked /usr/share/pacman/keyrings/
        popd
        sudo pacman-key --init
        sudo pacman-key --populate archlinux manjaro
    - id: install_manjaro-chrootbuild
      shell: bash
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/tools/development-tools/manjaro-chrootbuild
        pushd manjaro-chrootbuild
        sudo ./install.sh "PACKAGER = Manjaro Build Server <build@manjaro.org>"
        popd
    - id: clone_repo
      shell: bash
      run: |
        KERNEL=$(echo ${GITHUB_REPOSITORY} | cut -d'/' -f2)
        sudo git clone https://gitlab.manjaro.org/packages/core/${KERNEL}.git
        echo "KERNEL=${KERNEL}" >>$GITHUB_ENV
    - id: get_modules
      shell: bash
      run: |
        sudo cp ${{ env.KERNEL }}/modules.list .
        sudo sed -i -e '/^#/d' modules.list
        sudo mkdir modules
        pushd modules
        for m in $(cat ../modules.list); do
          sudo git clone "https://gitlab.manjaro.org/packages/extra/${{ env.KERNEL }}-extramodules/$m.git"
        done
        popd
    - id: build_modules
      shell: bash
      run: |
        sudo chrootbuild -K modules
    - id: publish_modules
      shell: bash -O extglob {0}
      run: |
        log_dir=/home/runner/.chrootbuild-logs
        pushd ${log_dir}
        sudo rm build_log
        for l in $(ls); do
          sudo mv $l $l.log
        done
        popd
        _ver=$(grep ^pkgver= ${{ env.KERNEL }}/PKGBUILD | cut -d'=' -f2)
        _rel=$(grep ^pkgrel= ${{ env.KERNEL }}/PKGBUILD | cut -d'=' -f2)
        _tag=${_ver}-${_rel}
        echo ${{ github.token }} | gh auth login --with-token
        gh release create ${_tag} --title ${_tag} --repo ${{ github.repository }} --notes "automated release" || echo "release already exists"
        GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${_tag}
        gh release upload ${_tag} --repo ${GITHUB_REPOSITORY} --clobber ./*.pkg.tar.* ${log_dir}/*
